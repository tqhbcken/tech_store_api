basePath: /api/v1
definitions:
  models.AddressCreateRequest:
    properties:
      address_line1:
        maxLength: 255
        type: string
      address_line2:
        maxLength: 255
        type: string
      city:
        maxLength: 100
        type: string
      district:
        maxLength: 100
        type: string
      full_name:
        maxLength: 100
        minLength: 2
        type: string
      is_default:
        type: boolean
      phone:
        maxLength: 20
        minLength: 8
        type: string
      user_id:
        type: integer
    required:
    - address_line1
    - city
    - full_name
    - phone
    - user_id
    type: object
  models.AddressUpdateRequest:
    properties:
      address_line1:
        maxLength: 255
        type: string
      address_line2:
        maxLength: 255
        type: string
      city:
        maxLength: 100
        type: string
      district:
        maxLength: 100
        type: string
      full_name:
        maxLength: 100
        minLength: 2
        type: string
      is_default:
        type: boolean
      phone:
        maxLength: 20
        minLength: 8
        type: string
    type: object
  models.BrandCreateRequest:
    properties:
      description:
        maxLength: 255
        type: string
      is_active:
        type: boolean
      name:
        maxLength: 100
        minLength: 2
        type: string
      slug:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - name
    - slug
    type: object
  models.BrandUpdateRequest:
    properties:
      description:
        maxLength: 255
        type: string
      is_active:
        type: boolean
      name:
        maxLength: 100
        minLength: 2
        type: string
      slug:
        maxLength: 100
        minLength: 2
        type: string
    type: object
  models.CartAddItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  models.CartUpdateItemRequest:
    properties:
      quantity:
        minimum: 1
        type: integer
    required:
    - quantity
    type: object
  models.CategoryCreateRequest:
    properties:
      name:
        maxLength: 100
        minLength: 2
        type: string
      slug:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - name
    - slug
    type: object
  models.CategoryUpdateRequest:
    properties:
      name:
        maxLength: 100
        minLength: 2
        type: string
      slug:
        maxLength: 100
        minLength: 2
        type: string
    type: object
  models.CreateUserReq:
    properties:
      email:
        type: string
      full_name:
        type: string
      is_active:
        default: false
        type: boolean
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role:
        default: user
        enum:
        - admin
        - user
        type: string
    required:
    - email
    - full_name
    - password
    - phone
    type: object
  models.LoginReq:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  models.OrderCreateRequest:
    properties:
      status:
        enum:
        - pending
        - completed
        - cancelled
        type: string
      total_amount:
        type: number
      user_id:
        type: integer
    required:
    - status
    - total_amount
    - user_id
    type: object
  models.OrderUpdateRequest:
    properties:
      status:
        enum:
        - pending
        - completed
        - cancelled
        type: string
      total_amount:
        type: number
      user_id:
        type: integer
    type: object
  models.PaymentCreateRequest:
    properties:
      amount:
        type: number
      method:
        enum:
        - momo
        - zalopay
        - vnpay
        - cod
        type: string
      order_id:
        type: integer
    required:
    - amount
    - method
    - order_id
    type: object
  models.ProductCreateRequest:
    properties:
      brand_id:
        type: integer
      category_id:
        type: integer
      description:
        maxLength: 1000
        type: string
      is_active:
        type: boolean
      name:
        maxLength: 200
        minLength: 2
        type: string
      price:
        type: number
      quantity:
        minimum: 0
        type: integer
      slug:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - category_id
    - name
    - price
    - quantity
    - slug
    type: object
  models.ProductUpdateRequest:
    properties:
      brand_id:
        type: integer
      category_id:
        type: integer
      description:
        maxLength: 1000
        type: string
      is_active:
        type: boolean
      name:
        maxLength: 200
        minLength: 2
        type: string
      price:
        type: number
      quantity:
        minimum: 0
        type: integer
      slug:
        maxLength: 100
        minLength: 2
        type: string
    type: object
  models.RegisterReq:
    properties:
      email:
        type: string
      full_name:
        type: string
      is_active:
        default: false
        type: boolean
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role:
        default: user
        enum:
        - admin
        - user
        type: string
    required:
    - email
    - full_name
    - password
    - phone
    type: object
  models.SwaggerAddress:
    description: Address model for Swagger documentation
    properties:
      address_line1:
        example: 123 Main St
        type: string
      address_line2:
        example: Apt 4B
        type: string
      city:
        example: Hanoi
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      district:
        example: Ba Dinh
        type: string
      full_name:
        example: John Doe
        type: string
      id:
        example: 1
        type: integer
      is_default:
        example: false
        type: boolean
      phone:
        example: "0912345678"
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  models.SwaggerBrand:
    description: Brand model for Swagger documentation
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Apple Inc.
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      name:
        example: Apple
        type: string
      slug:
        example: apple
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.SwaggerCart:
    description: Cart model for Swagger documentation
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/models.SwaggerCartItem'
        type: array
      session_id:
        example: session123
        type: string
      status:
        example: active
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  models.SwaggerCartItem:
    description: Cart item model for Swagger documentation
    properties:
      cart_id:
        example: 1
        type: integer
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      product_id:
        example: 1
        type: integer
      quantity:
        example: 2
        type: integer
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.SwaggerCategory:
    description: Category model for Swagger documentation
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Laptop
        type: string
      slug:
        example: laptop
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.SwaggerOrder:
    description: Order model for Swagger documentation
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      status:
        example: pending
        type: string
      total_amount:
        example: 1999.99
        type: number
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  models.SwaggerPayment:
    description: Payment model for Swagger documentation
    properties:
      amount:
        example: 1999.99
        type: number
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      method:
        example: cod
        type: string
      order_id:
        example: 1
        type: integer
      status:
        example: pending
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.SwaggerProduct:
    description: Product model for Swagger documentation
    properties:
      brand_id:
        example: 1
        type: integer
      category_id:
        example: 1
        type: integer
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Latest iPhone model
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      name:
        example: iPhone 15
        type: string
      price:
        example: 999.99
        type: number
      quantity:
        example: 10
        type: integer
      slug:
        example: iphone-15
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.SwaggerUser:
    description: User model for Swagger documentation
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      full_name:
        example: John Doe
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      phone:
        example: "0912345678"
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.UserUpdateRequest:
    properties:
      email:
        type: string
      full_name:
        maxLength: 100
        minLength: 2
        type: string
      is_active:
        type: boolean
      password:
        minLength: 6
        type: string
      phone:
        maxLength: 20
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - user
        type: string
    type: object
  response.Response:
    description: Standard API response structure
    properties:
      code:
        example: 200
        type: integer
      data: {}
      error: {}
      message:
        example: Operation successful
        type: string
      status:
        description: '"success" | "error"'
        example: success
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A TechStore e-commerce API built with Go
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: TechStore API
  version: "1.0"
paths:
  /addresses:
    get:
      consumes:
      - application/json
      description: Retrieve all addresses for the current user
      produces:
      - application/json
      responses:
        "200":
          description: Addresses retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SwaggerAddress'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all addresses
      tags:
      - addresses
    post:
      consumes:
      - application/json
      description: Create a new address for the current user
      parameters:
      - description: Address data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddressCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Address created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerAddress'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create new address
      tags:
      - addresses
  /addresses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid address id
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete address
      tags:
      - addresses
    get:
      consumes:
      - application/json
      description: Retrieve a specific address by ID
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerAddress'
              type: object
        "400":
          description: Invalid address id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Address not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get address by ID
      tags:
      - addresses
    put:
      consumes:
      - application/json
      description: Update address information
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      - description: Address update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddressUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Address updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerAddress'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update address
      tags:
      - addresses
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate tokens
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          properties:
            refresh_token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          properties:
            refresh_token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User registration
      tags:
      - auth
  /brands:
    get:
      consumes:
      - application/json
      description: Retrieve all brands
      produces:
      - application/json
      responses:
        "200":
          description: Brands retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SwaggerBrand'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all brands
      tags:
      - brands
    post:
      consumes:
      - application/json
      description: Create a new brand (Admin only)
      parameters:
      - description: Brand data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.BrandCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Brand created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerBrand'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create new brand
      tags:
      - brands
  /brands/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a brand (Admin only)
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Brand deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Brand not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete brand
      tags:
      - brands
    get:
      consumes:
      - application/json
      description: Retrieve a specific brand by ID
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Brand retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerBrand'
              type: object
        "404":
          description: Brand not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get brand by ID
      tags:
      - brands
    put:
      consumes:
      - application/json
      description: Update brand information (Admin only)
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      - description: Brand update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.BrandUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Brand updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerBrand'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Brand not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update brand
      tags:
      - brands
  /cart:
    delete:
      consumes:
      - application/json
      description: Remove all items from the cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart cleared
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Clear cart
      tags:
      - cart
    get:
      consumes:
      - application/json
      description: Retrieve the current user's cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerCart'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get cart
      tags:
      - cart
  /cart/items:
    post:
      consumes:
      - application/json
      description: Add a product to the current user's cart
      parameters:
      - description: Cart item data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CartAddItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Item added to cart
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerCartItem'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Add item to cart
      tags:
      - cart
  /cart/items/{itemId}:
    delete:
      consumes:
      - application/json
      description: Remove an item from the cart
      parameters:
      - description: Cart Item ID
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item removed from cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Cart item not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Update the quantity of an item in the cart
      parameters:
      - description: Cart Item ID
        in: path
        name: itemId
        required: true
        type: string
      - description: Cart item update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CartUpdateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item updated
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerCartItem'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Cart item not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update cart item
      tags:
      - cart
  /categories:
    get:
      consumes:
      - application/json
      description: Retrieve all categories
      produces:
      - application/json
      responses:
        "200":
          description: Categories retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SwaggerCategory'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category (Admin only)
      parameters:
      - description: Category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CategoryCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Category created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerCategory'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create new category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category (Admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Category deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Retrieve a specific category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerCategory'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category information (Admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CategoryUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Category updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerCategory'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update category
      tags:
      - categories
  /order:
    get:
      consumes:
      - application/json
      description: Retrieve all orders
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SwaggerOrder'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order (User/Admin only)
      parameters:
      - description: Order data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OrderCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerOrder'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create new order
      tags:
      - orders
  /order/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order (User/Admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Retrieve a specific order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerOrder'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update order information (User/Admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OrderUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerOrder'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update order
      tags:
      - orders
  /order/user/{userId}:
    get:
      consumes:
      - application/json
      description: Retrieve all orders for a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SwaggerOrder'
                  type: array
              type: object
        "404":
          description: No orders found for this user
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get orders by user ID
      tags:
      - orders
  /payments:
    post:
      consumes:
      - application/json
      description: Create a new payment record (User/Admin only)
      parameters:
      - description: Payment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PaymentCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Payment created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerPayment'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create payment
      tags:
      - payments
  /payments-callback/notify:
    post:
      consumes:
      - application/json
      description: Handle the callback from a payment gateway (e.g., Momo, VNPay)
      parameters:
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: string
      - description: Payment status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Payment status updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid callback data
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Handle payment callback
      tags:
      - payments
  /payments/{orderId}/status:
    get:
      consumes:
      - application/json
      description: Retrieve the status of a payment
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Payment status retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid order id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Payment not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get payment status
      tags:
      - payments
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve all products
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SwaggerProduct'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product (Admin only)
      parameters:
      - description: Product data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerProduct'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrieve a specific product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerProduct'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update product information (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerProduct'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - products
  /products/{product_id}/images:
    post:
      consumes:
      - application/json
      description: Add an image to a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Image URL
        in: formData
        name: image_url
        required: true
        type: string
      - description: Is main image
        in: formData
        name: is_main
        type: boolean
      produces:
      - application/json
      responses:
        "201":
          description: Product image added successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Add product image
      tags:
      - product-images
  /products/{product_id}/images/{image_id}:
    delete:
      consumes:
      - application/json
      description: Delete a product image (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product image deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product image not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete product image
      tags:
      - product-images
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve all users (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.SwaggerUser'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user account (Admin only)
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by ID (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerUser'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SwaggerUser'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
